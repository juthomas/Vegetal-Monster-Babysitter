#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)

// SDA => D2
// SCK => D1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'Bubble', 84x48px
const unsigned char bubble[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Bubble_background', 84x48px
const unsigned char bubble_background[] PROGMEM = {
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1184)
const int bubble_array_LEN = 2;
const unsigned char *bubble_array[2] = {
    bubble,
    bubble_background};

// 'Heart_0', 16x16px
const unsigned char heart_0[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Heart_1', 16x16px
const unsigned char heart_1[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0,
    0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Heart_2', 16x16px
const unsigned char heart_2[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8,
    0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Heart_3', 16x16px
const unsigned char heart_3[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x3e, 0x7c, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Heart_4', 16x16px
const unsigned char heart_4[] PROGMEM = {
    0x00, 0x00, 0x1c, 0x38, 0x3e, 0x7c, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc,
    0x3f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00};
// 'Heart_5', 16x16px
const unsigned char heart_5[] PROGMEM = {
    0x7c, 0x3e, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe,
    0x3f, 0xfc, 0x3f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 240)
const int heart_array_LEN = 5;
const unsigned char *heart_array[5] = {
    heart_1,
    heart_2,
    heart_3,
    heart_4,
    heart_5};

const unsigned char *heart_animation[] = {
    heart_1,
    heart_2,
    heart_3,
    heart_4,
    heart_5,
    heart_5,
    heart_4,
    heart_3,
    heart_2,
    heart_1,
    heart_0,
    heart_0,
};

// 'Skull_0', 16x16px
const unsigned char skull_0[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Skull_1', 16x16px
const unsigned char skull_1[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x80,
    0x01, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Skull_2', 16x16px
const unsigned char skull_2[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x0e, 0x70, 0x07, 0x20, 0x03, 0x80,
    0x01, 0xc0, 0x04, 0xe0, 0x0e, 0x70, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'Skull_3', 16x16px
const unsigned char skull_3[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x38, 0x1c, 0x1c, 0x38, 0x0e, 0x70, 0x07, 0x20, 0x03, 0x80,
    0x01, 0xc0, 0x04, 0xe0, 0x0e, 0x70, 0x1c, 0x38, 0x38, 0x1c, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00};
// 'Skull_4', 16x16px
const unsigned char skull_4[] PROGMEM = {
    0x40, 0x02, 0xe0, 0x07, 0x70, 0x0e, 0x38, 0x1c, 0x1c, 0x38, 0x0e, 0x70, 0x07, 0x20, 0x03, 0x80,
    0x01, 0xc0, 0x04, 0xe0, 0x0e, 0x70, 0x1c, 0x38, 0x38, 0x1c, 0x70, 0x0e, 0xe0, 0x07, 0x40, 0x02};
// 'Skull_5', 16x16px
const unsigned char skull_5[] PROGMEM = {
    0x40, 0x02, 0xe0, 0x07, 0x70, 0x0e, 0x27, 0xe4, 0x0f, 0xf0, 0x1f, 0xf8, 0x19, 0x98, 0x19, 0x98,
    0x19, 0x98, 0x1f, 0xf8, 0x1e, 0x78, 0x0f, 0xf0, 0x25, 0xa4, 0x70, 0x0e, 0xe0, 0x07, 0x40, 0x02};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 288)
const int epd_bitmap_allArray_LEN = 6;
const unsigned char *epd_bitmap_allArray[6] = {
    skull_0,
    skull_1,
    skull_2,
    skull_3,
    skull_4,
    skull_5,
};

const unsigned char *skull_animation[] = {
    skull_1,
    skull_2,
    skull_3,
    skull_4,
    skull_5,
    skull_5,
    skull_5,
    skull_5,
    skull_5,
    skull_5,
    skull_5,
    skull_5,
    // skull_4,
    // skull_3,
    // skull_2,
    // skull_1,
    // skull_0,
};

// 'vegetal_monster_bmp', 63x64px
const unsigned char vegetal_monster_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xfe, 0x0f, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xfc, 0x07, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x43, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xe2, 0x49, 0x24, 0x8f, 0xb8, 0x00,
    0x00, 0x01, 0xfa, 0x49, 0x24, 0xbf, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xdb, 0xb6, 0xfe, 0x60, 0x00,
    0x00, 0x7e, 0x7f, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x03, 0x80, 0x3f, 0xbf, 0xfb, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_blink1_bmp', 63x64px
const unsigned char vegetal_monster_blink1_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xff, 0xff, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xff, 0xff, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfe, 0x0f, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x47, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xe2, 0x49, 0x24, 0x8f, 0xb8, 0x00,
    0x00, 0x01, 0xfa, 0x49, 0x24, 0xbf, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xdb, 0xb6, 0xfe, 0x60, 0x00,
    0x00, 0x7e, 0x7f, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x03, 0x80, 0x3f, 0xbf, 0xfb, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_blink2_bmp', 63x64px
const unsigned char vegetal_monster_blink2_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xff, 0xff, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xff, 0xff, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfe, 0x0f, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x47, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xe2, 0x49, 0x24, 0x8f, 0xb8, 0x00,
    0x00, 0x01, 0xfa, 0x49, 0x24, 0xbf, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xdb, 0xb6, 0xfe, 0x60, 0x00,
    0x00, 0x7e, 0x7f, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x03, 0x80, 0x3f, 0xbf, 0xfb, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_blink3_bmp', 63x64px
const unsigned char vegetal_monster_blink3_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xff, 0xff, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xff, 0xff, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xff, 0xff, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xff, 0xff, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xff, 0xff, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xff, 0xff, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xff, 0xff, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xff, 0xff, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xe2, 0x49, 0x24, 0x8f, 0xb8, 0x00,
    0x00, 0x01, 0xfa, 0x49, 0x24, 0xbf, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xdb, 0xb6, 0xfe, 0x60, 0x00,
    0x00, 0x7e, 0x7f, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x03, 0x80, 0x3f, 0xbf, 0xfb, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_mouth1_bmp', 63x64px
const unsigned char vegetal_monster_mouth1_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xfe, 0x0f, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xfc, 0x07, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x43, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xe0, 0x00, 0x00, 0x0f, 0xb8, 0x00,
    0x00, 0x01, 0xe2, 0x49, 0x24, 0x8f, 0x00, 0x00, 0x00, 0x0c, 0xfa, 0x49, 0x24, 0xbe, 0x60, 0x00,
    0x00, 0x7e, 0x7e, 0xdb, 0xb6, 0xfc, 0xfc, 0x00, 0x03, 0x80, 0x3f, 0xff, 0xff, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_mouth2_bmp', 63x64px
const unsigned char vegetal_monster_mouth2_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xfe, 0x0f, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xfc, 0x07, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x43, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf7, 0x00, 0x49, 0x24, 0x01, 0xdf, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xe0,
    0x01, 0xf3, 0xc0, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00, 0x3b, 0xc0, 0x00, 0x00, 0x07, 0xb8, 0x00,
    0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0c, 0xe2, 0x49, 0x24, 0x8e, 0x60, 0x00,
    0x00, 0x7e, 0x7a, 0x49, 0x24, 0xbc, 0xfc, 0x00, 0x03, 0x80, 0x3e, 0xdb, 0xb6, 0xf8, 0x03, 0x80,
    0x00, 0x7f, 0x9f, 0xbe, 0xfb, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// 'vegetal_monster_mouth3_bmp', 63x64px
const unsigned char vegetal_monster_mouth3_bmp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x50, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x85, 0x14, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x85, 0x36, 0xd9, 0x42, 0x00, 0x00,
    0x00, 0x01, 0x45, 0x36, 0xd9, 0x45, 0x00, 0x00, 0x00, 0x01, 0x4d, 0xb6, 0xdb, 0x65, 0x00, 0x00,
    0x00, 0x01, 0x4c, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x23, 0x61, 0xff, 0xff, 0x0d, 0x88, 0x00,
    0x00, 0x23, 0x67, 0xff, 0xff, 0xcd, 0x88, 0x00, 0x00, 0x53, 0x0f, 0xff, 0xff, 0xe1, 0x94, 0x00,
    0x00, 0x53, 0x3f, 0xff, 0xff, 0xf9, 0x94, 0x00, 0x00, 0x52, 0x7f, 0xff, 0xff, 0xfc, 0x94, 0x00,
    0x10, 0x52, 0xff, 0x7f, 0xfd, 0xfe, 0x94, 0x10, 0x08, 0xd8, 0xff, 0x7e, 0xfd, 0xfe, 0x36, 0x20,
    0x06, 0x59, 0xff, 0x7e, 0xfd, 0xff, 0x34, 0xc0, 0x05, 0x19, 0xff, 0xfe, 0xff, 0xff, 0x31, 0x40,
    0x02, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x80, 0x01, 0x63, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00,
    0x01, 0xb3, 0xe0, 0xff, 0xfe, 0x0f, 0x9b, 0x00, 0x10, 0xd7, 0xc0, 0x7f, 0xfc, 0x07, 0xd6, 0x10,
    0x08, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcc, 0x20, 0x06, 0x37, 0x84, 0x7f, 0xfc, 0x43, 0xd8, 0xc0,
    0x05, 0x17, 0x86, 0x7f, 0xfc, 0xc3, 0xd1, 0x40, 0x02, 0xc7, 0x80, 0x7f, 0xfc, 0x03, 0xc6, 0x80,
    0x01, 0x67, 0x80, 0x7f, 0xfc, 0x03, 0xcd, 0x00, 0x01, 0xb7, 0x80, 0x7f, 0xfc, 0x03, 0xdb, 0x00,
    0x0c, 0xd7, 0xc0, 0xff, 0xfe, 0x07, 0xd6, 0x60, 0x70, 0x67, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1c,
    0x0f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xe0, 0x01, 0x95, 0xb6, 0xdb, 0xb6, 0xdb, 0x53, 0x00,
    0x00, 0x04, 0x92, 0xdb, 0xb6, 0x92, 0x40, 0x00, 0x00, 0x36, 0x12, 0x49, 0x24, 0x90, 0xd8, 0x00,
    0x01, 0xf6, 0x00, 0x49, 0x24, 0x00, 0xdf, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xe0,
    0x01, 0xf3, 0x80, 0x00, 0x00, 0x03, 0x9f, 0x00, 0x00, 0x3b, 0xc0, 0x00, 0x00, 0x07, 0xb8, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0xe0, 0x00, 0x00, 0x0e, 0x60, 0x00,
    0x00, 0x7e, 0x62, 0x49, 0x24, 0x8c, 0xfc, 0x00, 0x03, 0x80, 0x3a, 0x49, 0x24, 0xb8, 0x03, 0x80,
    0x00, 0x7f, 0x9e, 0xdb, 0xb6, 0xf3, 0xfc, 0x00, 0x00, 0x0f, 0xcf, 0xff, 0xff, 0xe7, 0xe0, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x03, 0x71, 0xb6, 0xdb, 0x1d, 0x80, 0x00, 0x00, 0x02, 0xc3, 0x66, 0xcd, 0x86, 0x80, 0x00,
    0x00, 0x05, 0x82, 0xc6, 0xc6, 0x83, 0x40, 0x00, 0x00, 0x06, 0x05, 0x96, 0xd3, 0x40, 0xc0, 0x00,
    0x00, 0x08, 0x0a, 0x14, 0x50, 0xa0, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x50, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x14, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x20, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 3696)
const int _allArray_LEN = 7;
const unsigned char *vegetal_monster_array[7] = {
    vegetal_monster_blink1_bmp,
    vegetal_monster_blink2_bmp,
    vegetal_monster_blink3_bmp,
    vegetal_monster_bmp,
    vegetal_monster_mouth1_bmp,
    vegetal_monster_mouth2_bmp,
    vegetal_monster_mouth3_bmp};

const unsigned char *open_mouth_animation[] = {
    vegetal_monster_mouth1_bmp,
    vegetal_monster_mouth2_bmp,
    vegetal_monster_mouth3_bmp,
    vegetal_monster_mouth2_bmp,
    vegetal_monster_mouth1_bmp,
    vegetal_monster_bmp,
};

const unsigned char *blink_animation[] = {
    vegetal_monster_blink1_bmp,
    vegetal_monster_blink2_bmp,
    vegetal_monster_blink3_bmp,
    vegetal_monster_blink3_bmp,
    vegetal_monster_blink3_bmp,
    vegetal_monster_blink3_bmp,
    vegetal_monster_blink2_bmp,
    vegetal_monster_blink1_bmp,
    vegetal_monster_bmp,
};

void print_delayed_text(char *text, int _delay)
{
  for (int i = 0; text[i]; i++)
  {
    display.print(text[i]);
    display.display();
    delay(_delay);
  }
}

void displayLoading()
{
  const int offset_y = 3;

  for (int i = 0; i < (int)(sizeof(blink_animation) / sizeof(unsigned char *)); i++)
  {
    // display.clearDisplay();
    display.fillRect(0, offset_y, 63, 64, SSD1306_BLACK);
    display.drawBitmap(0, offset_y, blink_animation[i], 63, 64, SSD1306_WHITE);
    display.display();
    delay(100);
  }

  for (int i = 0; i < 6; i++)
  {
    // display.clearDisplay();
    display.fillRect(0, offset_y, 63, 64, SSD1306_BLACK);
    display.drawBitmap(0, offset_y, open_mouth_animation[i], 63, 64, SSD1306_WHITE);
    display.display();
    delay(100);
  }
  for (int i = 0; i < 6; i++)
  {
    // display.clearDisplay();
    display.fillRect(0, offset_y, 63, 64, SSD1306_BLACK);
    display.drawBitmap(0, offset_y, open_mouth_animation[i], 63, 64, SSD1306_WHITE);
    display.display();
    delay(100);
  }
  for (int i = 0; i < 6; i++)
  {
    // display.clearDisplay();
    display.fillRect(0, offset_y, 63, 64, SSD1306_BLACK);

    display.drawBitmap(0, offset_y, open_mouth_animation[i], 63, 64, SSD1306_WHITE);
    display.display();
    delay(100);
  }

  for (int i = 0; i < (int)(sizeof(heart_animation) / sizeof(unsigned char *)); i++)
  {
    // display.clearDisplay();
    display.fillRect(64, 0, 16, 16, SSD1306_BLACK);
    display.drawBitmap(64, 0, heart_animation[i], 16, 16, SSD1306_WHITE);
    display.display();
    delay(100);
  }
  for (int i = 0; i < (int)(sizeof(heart_animation) / sizeof(unsigned char *)); i++)
  {
    // display.clearDisplay();
    display.fillRect(64, 0, 16, 16, SSD1306_BLACK);
    display.drawBitmap(64, 0, heart_animation[i], 16, 16, SSD1306_WHITE);
    display.display();
    delay(100);
  }
  for (int i = 0; i < (int)(sizeof(heart_animation) / sizeof(unsigned char *)); i++)
  {
    // display.clearDisplay();
    display.fillRect(64, 0, 16, 16, SSD1306_BLACK);
    display.drawBitmap(64, 0, heart_animation[i], 16, 16, SSD1306_WHITE);
    display.display();
    delay(100);
  }
  for (int i = 0; i < (int)(sizeof(heart_animation) / sizeof(unsigned char *)); i++)
  {
    // display.clearDisplay();
    display.fillRect(64, 0, 16, 16, SSD1306_BLACK);
    display.drawBitmap(64, 0, heart_animation[i], 16, 16, SSD1306_WHITE);
    display.display();
    delay(100);
  }

  // display.clearDisplay();
  display.drawBitmap(42, 2, bubble_background, 84, 48, SSD1306_BLACK);
  display.drawBitmap(42, 2, bubble, 84, 48, SSD1306_WHITE);
  display.setTextColor(BLACK); // Draw white text
  display.setCursor(58, 10);
  display.display();
  delay(50);
  print_delayed_text("Je vais ", 100);
  display.setCursor(58, 22);
  print_delayed_text("mourir...", 100);

  display.display();

  delay(1000);

  display.clearDisplay();
}

void print_partial_text(char *text, int characters)
{
  for (int i = 0; text[i] && i < characters; i++)
  {
    display.print(text[i]);
  }
}

void idle(bool talk, bool is_okay)
{
  const int middle_offset = 0;
  const int left_offset = -32;
  static uint32_t current_frame = 0;
  static int current_x_offset = 0;
  const int offset_y = 3;
  const int offset_x = 32;
  static int heart_x = 5;
  static int heart_y = 16;
  static uint16_t current_monster_frame = 0;

  static uint16_t talk_frame = 0;
  display.clearDisplay();
  if (current_frame % ((int)(sizeof(open_mouth_animation) / sizeof(unsigned char *)) * 4) < (int)(sizeof(open_mouth_animation) / sizeof(unsigned char *)) * 3)
  {
    current_monster_frame = current_frame % (int)(sizeof(open_mouth_animation) / sizeof(unsigned char *));
  }

  display.fillRect(offset_x + current_x_offset, offset_y, 63, 64, SSD1306_BLACK);
  display.drawBitmap(offset_x + current_x_offset, offset_y, open_mouth_animation[current_monster_frame], 63, 64, SSD1306_WHITE);

  if (true)
  {
    display.fillRect(heart_x + current_x_offset - 1, heart_y, 18, 16, SSD1306_BLACK);

    if (is_okay)
      display.drawBitmap(heart_x + current_x_offset, heart_y, heart_animation[current_frame % (int)(sizeof(heart_animation) / sizeof(unsigned char *))], 16, 16, SSD1306_WHITE);
    else
      display.drawBitmap(heart_x + current_x_offset, heart_y, skull_animation[current_frame % (int)(sizeof(skull_animation) / sizeof(unsigned char *))], 16, 16, SSD1306_WHITE);

    if ((current_frame + 1) % (int)(sizeof(heart_animation) / sizeof(unsigned char *)) == 0)
    {
      if (random(2))
        heart_x = random(0, 16);
      else
        heart_x = random(96, 112);
      heart_y = random(0, 64 - 16);
    }
  }

  if (talk == true && current_x_offset == left_offset)
  {
    display.drawBitmap(42, 2, bubble_background, 84, 48, SSD1306_BLACK);
    display.drawBitmap(42, 2, bubble, 84, 48, SSD1306_WHITE);
    display.setTextColor(BLACK); // Draw white text

    if (is_okay)
    {

      display.setCursor(58, 8);
      print_partial_text("Je suis", talk_frame);
      display.setCursor(58, 18);
      print_partial_text("pret a...", talk_frame - 8);
      display.setCursor(58, 28);
      print_partial_text("tuer !!!", talk_frame - 28);
    }
    else
    {
      display.setCursor(58, 10);
      print_partial_text("Je vais", talk_frame);
      display.setCursor(58, 22);
      print_partial_text("mourir...", talk_frame - 8);
    }
    talk_frame++;
  }


  if (talk == true && current_x_offset != left_offset)
  {
    current_x_offset--;
    talk_frame = 0;
  }
  else if (talk == true)
  {
  }
  else if (talk == false && current_x_offset != middle_offset)
  {
    current_x_offset++;
  }
  current_frame++;
  // if (current_frame > (int)(sizeof(open_mouth_animation) / sizeof(unsigned char *)) * 4)
  //   current_frame = 0;
}

void setup()
{
  // put your setup code here, to run once:
  Serial.begin(115200);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }
  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);
  display.clearDisplay();

  // for (;;)
  // {
  //   displayLoading();
  //   delay(100);
  // }
}

void loop()
{
  static uint32_t i = 0;

  idle(i % 200 < 100, i % 400 < 200);
  display.setCursor(100, 52);     // Start at top-left corner
  display.fillRoundRect(94, 49, 35, 13, 3, SSD1306_BLACK);
  display.fillRoundRect(95, 50, 33, 11, 3, SSD1306_WHITE);
  display.setTextColor(BLACK); // Draw white text
  display.printf("%04d", analogRead(A0));
  display.display();
  delay(100);

  i++;
  // put your main code here, to run repeatedly:
}
